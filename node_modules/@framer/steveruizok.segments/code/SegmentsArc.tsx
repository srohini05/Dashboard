import * as React from "react"
import {
    Stack,
    FrameProps,
    Frame,
    addPropertyControls,
    ControlType,
} from "framer"

type Props = {
    gap?: number
    depth?: number
    segments?: string[]
    strokeWidth?: number
    stroke?: string
    strokeLinejoin?: "bevel" | "miter" | "round" | string
} & FrameProps

export function Segments(props: Props) {
    const {
        gap,
        segments,
        depth,
        strokeLinejoin,
        strokeWidth,
        stroke,
        ...rest
    } = props

    const size = 100
    const centerX = size / 2
    const centerY = size / 2
    const radius = (size - strokeWidth) / 2
    const sweep = 360 / segments.length

    return (
        <Frame {...rest} background="none">
            <svg
                viewBox={`0 0 ${size} ${size}`}
                style={{
                    height: "100%",
                    width: "100%",
                    transform: `rotate(${gap / 2}deg)`,
                }}
            >
                {segments.map((segment, i) => {
                    const startAngle = sweep * i
                    const endAngle = startAngle + sweep - gap

                    const path = describeArc(
                        centerX,
                        centerY,
                        radius,
                        depth,
                        startAngle,
                        endAngle
                    )

                    return (
                        <path
                            key={i}
                            d={path}
                            stroke={stroke}
                            strokeWidth={strokeWidth}
                            fill={segment}
                            strokeLinejoin={strokeLinejoin as any}
                        />
                    )
                })}
            </svg>
        </Frame>
    )
}

Segments.defaultProps = {
    gap: 8,
    depth: 10,
    strokeWidth: 1,
    stroke: "#000",
    segments: ["#fbffec", "#fbffec", "#0099ff"],
    strokeLinejoin: "miter",
}

// Learn more: https://framer.com/api/property-controls/
addPropertyControls(Segments, {
    gap: {
        title: "Gap",
        type: ControlType.Number,
        min: 0,
        max: 50,
        defaultValue: 8,
    },
    depth: {
        title: "Depth",
        type: ControlType.Number,
        min: 1,
        max: 50,
        defaultValue: 10,
    },
    strokeWidth: {
        title: "Str. Width",
        type: ControlType.Number,
        min: 0,
        defaultValue: 1,
    },
    stroke: {
        title: "Stroke",
        type: ControlType.Color,
        defaultValue: "#000",
    },
    segments: {
        title: "Segments",
        type: ControlType.Array,
        propertyControl: {
            type: ControlType.Color,
            defaultValue: "#0099ff",
        },
        defaultValue: ["#fbffec", "#fbffec", "#0099ff"],
    },
    strokeLinejoin: {
        title: "Join",
        type: ControlType.SegmentedEnum,
        options: ["bevel", "miter", "round"],
        optionTitles: ["Bevel", "Miter", "Round"],
        defaultValue: "miter",
    },
})

// Helpers
// Thanks to https://stackoverflow.com/a/18473154/12634091

function polarToCartesian(centerX, centerY, radius, angleInDegrees) {
    var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0

    return {
        x: centerX + radius * Math.cos(angleInRadians),
        y: centerY + radius * Math.sin(angleInRadians),
    }
}

function describeArc(x, y, radius, depth, startAngle, endAngle) {
    var a = polarToCartesian(x, y, radius - depth, endAngle)
    var b = polarToCartesian(x, y, radius, endAngle)
    var c = polarToCartesian(x, y, radius, startAngle)
    var d = polarToCartesian(x, y, radius - depth, startAngle)

    var arcSweep = endAngle - startAngle <= 180 ? "0" : "1"

    return [
        ...["M", b.x, b.y],
        ...["A", radius, radius, 0, arcSweep, 0, c.x, c.y],
        ...["L", d.x, d.y],
        ...["A", radius - depth, radius - depth, 0, arcSweep, 1, a.x, a.y],
        ...["L", a.x, a.y],
        "Z",
    ].join(" ")
}
