import * as React from "react"
import { PropertyControls, ControlType } from "framer"

// For the best editing experience in VSCode, install Prettier
// https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode

// Everything below is standard React. If you are new, start here:
// https://reactjs.org/docs/getting-started.html#learn-react
// https://reactjs.org/docs/components-and-props.html

// We can tell TypeScript to help us by defining our types
// https://www.typescriptlang.org/docs/handbook/basic-types.html
type PlayPauseProps = {
    size: number
    cornerRadius: number
    color: string
    backgroundColor: string
    shadowRadius: number
    shadowOffset: number
    shadowColor: string
    paused: boolean
    onPlay: () => void
    onPause: () => void
}

export class PlayPauseButton extends React.Component<PlayPauseProps> {
    render() {
        let style = {
            ...this.defaultStyle,
            background: this.props.backgroundColor,
            boxShadow: `0px ${this.props.shadowOffset}px ${
                this.props.shadowRadius
            }px ${this.props.shadowColor}`,
        }

        let content = this.props.paused ? (
            <RoundedTriangle
                cornerRadius={this.props.cornerRadius}
                size={this.props.size + 10}
                color={this.props.color}
            />
        ) : (
            <RoundedPaused
                cornerRadius={this.props.cornerRadius}
                size={this.props.size + 10}
                color={this.props.color}
            />
        )

        return (
            <div style={style} onClick={this.onClick.bind(this)}>
                {content}
            </div>
        )
    }

    onClick() {
        if (this.props.paused) {
            this.props.onPlay()
        } else {
            this.props.onPause()
        }
    }

    // Set default values for props if there are none
    // https://reactjs.org/docs/react-component.html#defaultprops
    static defaultProps: PlayPauseProps = {
        width: 80,
        height: 80,
        size: 16,
        cornerRadius: 4,
        color: "blue",
        backgroundColor: "rgba(255,255,255,0.0)",
        shadowRadius: 0,
        shadowOffset: 0,
        shadowColor: "rgba(0,0,0,0.1)",
        paused: true,
    }

    // Add Framer UI for this component (in the properties panel)
    // https://framer.com/learn/docs/components#code
    static propertyControls: PropertyControls<PlayPauseProps> = {
        paused: { type: ControlType.Boolean, title: "Paused" },
        size: { type: ControlType.Number, title: "Size", max: 150 },
        cornerRadius: {
            type: ControlType.Number,
            title: "Corner",
            max: 15,
            step: 0.1,
        },
        color: { type: ControlType.Color, title: "Color" },
        backgroundColor: { type: ControlType.Color, title: "Background Color" },
        shadowRadius: { type: ControlType.Number, title: "Shadow Radius" },
        shadowOffset: { type: ControlType.Number, title: "Shadow Offset" },
        shadowColor: { type: ControlType.Color, title: "Shadow Color" },
    }

    defaultStyle: React.CSSProperties = {
        height: "100%",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        textAlign: "center",
        borderRadius: "50%",
        overflow: "hidden",
    }
}

type RoundedPausedProps = {
    size: number
    cornerRadius: number
    color: string
}

class RoundedPaused extends React.Component<RoundedPausedProps> {
    static defaultProps: RoundedPausedProps = {
        size: 5,
        cornerRadius: 4,
        color: "blue",
    }

    render() {
        let offsetX = this.props.size * 0.11
        let gap = this.props.size * 0.04
        let widthScale = 0.8
        let width = (this.props.size / 2) * widthScale
        let leftRect = this.rectangle(
            -gap / 2 + gap / 2,
            0,
            width - gap / 2,
            this.props.size,
            this.props.cornerRadius
        )
        let rightRect = this.rectangle(
            gap / 2 + gap + width,
            0,
            width - gap / 2,
            this.props.size,
            this.props.cornerRadius
        )
        return (
            <svg
                xmlns="http://www.w3.org/2000/svg"
                width={this.props.size * widthScale + gap}
                height={this.props.size}
            >
                <path stroke="none" fill={this.props.color} d={leftRect.path} />
                <path
                    stroke="none"
                    fill={this.props.color}
                    d={rightRect.path}
                />
            </svg>
        )
    }

    rectangle(x, y, w, h, r) {
        function p(x, y) {
            return x + " " + y + " "
        }

        let strPath = "M" + p(x + r, y) //A
        strPath += "L" + p(x + w - r, y) + "Q" + p(x + w, y) + p(x + w, y + r) //B
        strPath +=
            "L" +
            p(x + w, y + h - r) +
            "Q" +
            p(x + w, y + h) +
            p(x + w - r, y + h) //C
        strPath += "L" + p(x + r, y + h) + "Q" + p(x, y + h) + p(x, y + h - r) //D
        strPath += "L" + p(x, y + r) + "Q" + p(x, y) + p(x + r, y) //A
        strPath += "Z"

        return { width: w, height: h, path: strPath }
    }
}

type RoundedTriangleProps = {
    size: number
    cornerRadius: number
    color: string
}

class RoundedTriangle extends React.Component<RoundedTriangleProps> {
    static defaultProps: RoundedTriangleProps = {
        size: 5,
        cornerRadius: 4,
        color: "blue",
    }

    render() {
        let offsetX = this.props.size * 0.08
        let polygon = this.roundedPolygon(
            3,
            this.props.size,
            this.props.cornerRadius * 0.8,
            0
        )
        let transform =
            "rotate(90 " +
            (polygon.width / 2 + offsetX) +
            " " +
            (polygon.height / 2 + offsetX) +
            ") "
        return (
            <svg
                xmlns="http://www.w3.org/2000/svg"
                width={polygon.width + offsetX * 2}
                height={polygon.height}
            >
                <path
                    transform={transform}
                    stroke="none"
                    fill={this.props.color}
                    d={polygon.path}
                />
            </svg>
        )
    }

    roundedPolygon(N, L, R, padding) {
        padding = padding || 0

        var half = ((N - 2) * Math.PI) / N / 2, // Half angle of corner
            sin = Math.sin(half),
            cos = Math.cos(half),
            gap = L - (2 / Math.tan(half)) * R,
            round = 2 * cos * R,
            D = L / cos, // Diameter cross the polygon
            offsetY = 0

        // Diameter is different for odd-sided polygon
        if (N % 2) {
            var vertial = D / 2 + (D / 2) * sin
            D = Math.sqrt(Math.pow(L / 2, 2) + Math.pow(vertial, 2))
            offsetY = (D - vertial) / 2
        }

        D += 2 * padding

        function getQuadrant(x) {
            return (
                Math.floor(
                    ((x + 2 * Math.PI) % (2 * Math.PI)) / (Math.PI / 2)
                ) + 1
            )
        }

        var points = [[0, R / sin - R * sin + padding + offsetY]],
            angles = [half - Math.PI / 2],
            horizontalCut = 0

        for (var i = 1; i <= N; i += 1) {
            var prev = angles[i - 1],
                next = prev + Math.PI - 2 * half,
                middle = (prev + next) / 2

            var prevQ = getQuadrant(prev),
                nextQ = getQuadrant(next)

            // Rounded corner reduce the horizontal size of image
            if (prevQ === 1 && nextQ >= 2 && nextQ <= 3) {
                horizontalCut =
                    (Math.cos(Math.abs(middle - Math.PI / 2)) * R) / sin - R
            }

            angles.push(next)
            points.push([Math.cos(middle) * round, Math.sin(middle) * round])
            if (i !== N) {
                points.push([Math.cos(next) * gap, Math.sin(next) * gap])
            }
        }

        // Rounded corner reduce the vertical size of image
        var vertialCut = R / sin - R

        // Just recalculate the cords of start point
        if (N % 2) {
            D -= horizontalCut * 2
            points[0][1] -= (horizontalCut * 2 + vertialCut) / 2
        } else {
            D -= vertialCut * 2
            points[0][1] -= vertialCut
        }
        points[0][0] = D / 2 - cos * R

        // Let the width be an integer
        var width = Math.ceil(D),
            delta = (width - D) / 2
        points[0][0] += delta
        points[0][1] += delta

        function fixFloat(value) {
            var fixed = +value.toPrecision(14)
            if (Math.abs(fixed) < 1e-13) {
                fixed = 0
            }
            return fixed
        }

        var list = []
        points.forEach(function(p, index) {
            var x = fixFloat(p[0]),
                y = fixFloat(p[1])
            if (index === 0) {
                list.push("M" + x + " " + y)
            } else if (index % 2) {
                list.push("a" + R + " " + R + " 0 0 1 " + x + " " + y)
            } else {
                list.push("l" + x + " " + y)
            }
        })

        var path = list.join("")

        return {
            width: width,
            height: width,
            path: path,
        }
    }
}
