import * as React from "react"
import { PropertyControls, ControlType } from "framer"

enum SourceType {
    File = "File",
    URL = "URL",
}

type Props = {
    sourceType: SourceType
    file: string
    url: string
    shouldPlay: boolean
    debug: boolean
    hideIcon: boolean
    onProgress: (number) => void
    onTimeUpdate: (currentTime: number, duration: number) => void
    onEnded: () => void
    onError: () => void
    onPlaying: () => void
    onPause: () => void
    onPlay: () => void
    onStalled: () => void
    onCanPlay: () => void
    onCanPlayThrough: () => void
}

export class AudioPlayer extends React.Component<Props> {
    // Define some standard CSS for your component
    style: React.CSSProperties = {
        height: "100%",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        textAlign: "center",
        overflow: "hidden",
    }

    audioRef = React.createRef()

    render() {
        var url =
            this.props.sourceType == SourceType.URL
                ? this.props.url
                : this.props.file
        var icon = (
            <svg
                width="32"
                height="32"
                viewBox="0 0 32 32"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
            >
                <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M8.25494 20.5045H5.50109C5.10316 20.5046 4.72148 20.3466 4.44002 20.0653C4.15855 19.784 4.00036 19.4024 4.00024 19.0045V13.0038C4.00036 12.6058 4.15855 12.2242 4.44002 11.9429C4.72148 11.6616 5.10316 11.5036 5.50109 11.5038H8.25109C8.7815 11.5038 9.29022 11.2932 9.66549 10.9184L13.7916 6.79705C13.9315 6.6571 14.1098 6.56178 14.3039 6.52315C14.498 6.48452 14.6992 6.50432 14.8821 6.58004C15.0649 6.65576 15.2212 6.78399 15.3312 6.94854C15.4412 7.11308 15.4999 7.30654 15.4999 7.50445V24.4995C15.4999 24.6974 15.4411 24.8908 15.3312 25.0553C15.2212 25.2199 15.0649 25.3481 14.882 25.4239C14.6992 25.4996 14.498 25.5195 14.3039 25.4809C14.1098 25.4423 13.9314 25.3471 13.7914 25.2072L9.66924 21.09C9.29402 20.7151 8.78534 20.5046 8.25494 20.5045V20.5045ZM18.9918 10.8495C18.8769 10.7841 18.7763 10.6963 18.696 10.5913C18.6158 10.4862 18.5574 10.3661 18.5245 10.238C18.4916 10.11 18.4847 9.97663 18.5044 9.84589C18.5241 9.71515 18.5699 9.5897 18.639 9.477C18.7776 9.25288 18.9975 9.09097 19.2527 9.02507C19.5078 8.95918 19.7786 8.99439 20.0084 9.12335C21.221 9.81584 22.2289 10.8166 22.9299 12.0243C23.631 13.2319 24.0002 14.6035 24.0002 15.9999C24.0002 17.3962 23.631 18.7678 22.9299 19.9754C22.2289 21.1831 21.221 22.1839 20.0084 22.8764C19.7786 23.0053 19.5078 23.0405 19.2527 22.9746C18.9975 22.9087 18.7776 22.7468 18.639 22.5227C18.5699 22.41 18.5241 22.2846 18.5044 22.1538C18.4847 22.0231 18.4916 21.8897 18.5245 21.7617C18.5574 21.6336 18.6158 21.5135 18.696 21.4084C18.7763 21.3034 18.8769 21.2156 18.9918 21.1502C19.9047 20.6354 20.6644 19.8871 21.193 18.9822C21.7216 18.0772 22.0002 17.0479 22.0002 15.9999C22.0002 14.9518 21.7216 13.9225 21.193 13.0176C20.6644 12.1126 19.9047 11.3643 18.9918 10.8495V10.8495Z"
                    fill="black"
                />
            </svg>
        )

        let contents = this.props.hideIcon ? "" : icon
        return (
            <div style={this.style}>
                {contents}
                <audio ref={this.audioRef} src={url} />{" "}
            </div>
        )
    }

    debug(message: string, args: string[] = null) {
        if (!this.props.debug) {
            return
        }
        if (args) {
            console.log("AudioPlayer " + message, args)
        } else {
            console.log("AudioPlayer " + message)
        }
    }

    audioPlayer(): HTMLAudioElement {
        return this.audioRef.current as HTMLAudioElement
    }

    componentDidMount() {
        // Setup events
        this.audioPlayer().onended = this.onEnded.bind(this)
        this.audioPlayer().ontimeupdate = this.onTimeUpdate.bind(this)
        this.audioPlayer().oncanplay = this.onCanPlay.bind(this)
        this.audioPlayer().oncanplaythrough = this.onCanPlayThrough.bind(this)
        this.audioPlayer().onstalled = this.onStalled.bind(this)
        this.audioPlayer().onerror = this.onError.bind(this)
        this.audioPlayer().onplay = this.onPlay.bind(this)
        this.audioPlayer().onpause = this.onPause.bind(this)
        this.audioPlayer().onplaying = this.onPlaying.bind(this)
    }

    componentDidUpdate() {
        if (this.props.shouldPlay) {
            this.audioPlayer().play()
        } else {
            this.audioPlayer().pause()
        }
    }

    onTimeUpdate() {
        let progress =
            this.audioPlayer().currentTime / this.audioPlayer().duration
        if (this.props.onProgress) {
            this.props.onProgress(progress)
        }
        if (this.props.onTimeUpdate) {
            this.props.onTimeUpdate(
                this.audioPlayer().currentTime,
                this.audioPlayer().duration
            )
        }
    }

    onEnded() {
        if (this.props.onEnded) {
            this.props.onEnded()
        }
    }

    onPlay() {
        this.debug("onPlay")
        if (this.props.onPlay) {
            this.props.onPlay()
        }
    }

    onPause() {
        this.debug("onPause")
        if (this.props.onPause) {
            this.props.onPause()
        }
    }

    onPlaying() {
        this.debug("onPlaying")
        if (this.props.onPlaying) {
            this.props.onPlaying()
        }
    }

    onError(error) {
        this.debug("onError", error)
        if (this.props.onError) {
            this.props.onError()
        }
    }

    onStalled() {
        this.debug("onStalled")
        if (this.props.onStalled) {
            this.props.onStalled()
        }
    }

    onCanPlay() {
        this.debug("onCanPlay")
        if (this.props.onCanPlay) {
            this.props.onCanPlay()
        }
    }

    onCanPlayThrough() {
        this.debug("onCanPlayThrough")
        if (this.props.onCanPlayThrough) {
            this.props.onCanPlayThrough()
        }
    }
    // Set default values for props if there are none
    // https://reactjs.org/docs/react-component.html#defaultprops
    static defaultProps: Props = {
        sourceType: SourceType.File,
        file: "",
        url: "",
        shouldPlay: false,
        hideIcon: false,
        debug: false,
        onEnded: null,
        onError: null,
        onPlaying: null,
        onPause: null,
        onPlay: null,
        onStalled: null,
        onCanPlay: null,
        onCanPlayThrough: null,
        onProgress: null,
        onTimeUpdate: null,
    }

    // Add Framer UI for this component (in the properties panel)
    // https://framer.com/learn/docs/components#code
    static propertyControls: PropertyControls<Props> = {
        sourceType: {
            type: ControlType.SegmentedEnum,
            title: "Source",
            options: [SourceType.URL, SourceType.File],
        },
        url: {
            type: ControlType.String,
            title: " ",
            placeholder: "http://website.com/example.mp4",
            hidden(props) {
                return props.sourceType === SourceType.File
            },
        },
        file: {
            type: ControlType.File,
            title: " ",
            allowedFileTypes: ["mp4", "m4a"],
            hidden(props) {
                return props.sourceType === SourceType.URL
            },
        },
        hideIcon: { type: ControlType.Boolean, title: "Hide Icon" },
    }
}
