import * as React from "react"
import { PropertyControls, ControlType } from "framer"

type Props = {
    strokeWidth: number
    baseColor: string
    color: string
    progress: number
}

export class ProgressBar extends React.Component<Props> {
    style: React.CSSProperties = {
        height: "100%",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        textAlign: "center",
        overflow: "hidden",
        width: "100%"
    }

    state = {
        width: 0,
        height: 0
    }

    divRef = React.createRef()

    updateElementWidth() {
        if (this.divRef.current) {
            let ele = this.divRef.current as HTMLElement
            if (this.state.width != ele.offsetWidth || this.state.height != ele.offsetHeight) {
                this.setState({ width: ele.offsetWidth, height: ele.offsetHeight })
            }
        }  
    }

    componentDidMount() {
        this.updateElementWidth()
    }
    componentDidUpdate() {
        this.updateElementWidth()
    }

    render() {
        let canvasWidth = this.state.width
        let canvasHeight = this.state.height

        let lineWidth = Math.max(
            canvasWidth * this.props.progress,
            this.props.strokeWidth
        )
        let lineInset = this.props.strokeWidth / 2
        let lineY = canvasHeight / 2
        let baseLine = (
            <line
                x1={lineInset}
                y1={lineY}
                x2={canvasWidth - lineInset}
                y2={lineY}
                stroke={this.props.baseColor}
                strokeLinecap="round"
                strokeWidth={this.props.strokeWidth}
                fill="none"
            />
        )
        let line = (
            <line
                x1={lineInset}
                y1={lineY}
                x2={lineWidth - lineInset}
                y2={lineY}
                stroke={this.props.color}
                strokeLinecap="round"
                strokeWidth={this.props.strokeWidth}
                fill="none"
            />
        )
        if (this.props.progress == 0.0) {
            line = null
        }

        let svg = (
            <svg width={canvasWidth} height={canvasHeight}>
                {baseLine}
                {line}
            </svg>
        )
        return <div ref={this.divRef} style={this.style}>{svg}</div>
    }

    static defaultProps: Props = {
        strokeWidth: 10,
        progress: 0.5,
        baseColor: "rgba(222,222,222,0.0)",
        color: "rgba(41,91,255,1.0)"
    }

    static propertyControls: PropertyControls<Props> = {
        color: { type: ControlType.Color, title: "Color" },
        baseColor: { type: ControlType.Color, title: "Base Color" },
        strokeWidth: {
            type: ControlType.Number,
            title: "Line Width",
            step: 0.1,
        },
        progress: {
            type: ControlType.Number,
            title: "Progress",
            min: 0,
            max: 1,
            step: 0.01,
        },
    }
}
