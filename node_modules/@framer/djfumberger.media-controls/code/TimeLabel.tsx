import * as React from "react"
import { PropertyControls, ControlType, Frame } from "framer"

type Props = { seconds: 0 }

export class TimeLabel extends React.Component<Props> {
    // Define some standard CSS for your component
    style: React.CSSProperties = {
        height: "100%",
        width: "100%",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        color: "#8855FF",
        background: "rgba(0, 0, 0, 0.0)",
        overflow: "hidden",
    }

    emptyStyle: React.CSSProperties = {
        height: "100%",
        display: "flex",
        alignItems: "center",
        textAlign: "center",
        justifyContent: "center",
        color: "black",
        fontSize: "18px",
        fontWeight: "bold",
        padding: "20px",
        background: "rgba(0, 0, 0, 0.1)",
        overflow: "hidden",
    }

    toMMSS(seconds: number) {
        let sec_num: number = parseInt(seconds, 10)
        var hours = Math.floor(sec_num / 3600)
        var minutes = Math.floor((sec_num - hours * 3600) / 60)
        var seconds = sec_num - hours * 3600 - minutes * 60

        if (seconds < 10) {
            seconds = "0" + seconds
        }
        var comps = []
        if (hours > 0) {
            if (minutes < 10) {
                minutes = "0" + minutes
            }
            comps.push(hours)
        }
        comps.push(minutes)
        comps.push(seconds)
        return comps.join(":")
    }

    renderEmpty() {
        return (
            <div style={this.emptyStyle}>
                Connect to a frame with a text label in it
            </div>
        )
    }
    render() {
        let timeStr = this.toMMSS(this.props.seconds)
        let children = this.props.children.map(obj => {
            let textChildren = obj.props.children.map(childObj => {
                return React.cloneElement(childObj, { text: timeStr })
            })
            return React.cloneElement(obj, { children: textChildren })
        })

        if (this.props.children.length > 0) {
            return <div style={this.style}>{children}</div>
        } else {
            return this.renderEmpty()
        }
    }

    static defaultProps: Props = {
        seconds: 0,
    }

    static propertyControls: PropertyControls<Props> = {
        seconds: {
            type: ControlType.Number,
            title: "Seconds",
            step: 1,
            max: 3600 * 2,
        },
    }
}
